{"version":3,"file":"static/js/311.44388668.chunk.js","mappings":"yPAGaA,EAAOC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qOAWhBC,EAAOH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qGAOfG,EAAYL,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qGAOpBK,EAAQP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2IAIHO,G,SC9Bb,SAASC,EAASC,GAAkC,IAA/BC,EAAID,EAAJC,KAAMC,EAASF,EAATE,UAAWC,EAASH,EAATG,UACjD,OACIC,EAAAA,EAAAA,MAAChB,EAAI,CAAAiB,SAAA,EACDC,EAAAA,EAAAA,KAACV,EAAK,CAACW,IAAG,kCAAAC,OAAoCL,GAAaM,IAAI,MAC/DH,EAAAA,EAAAA,KAACd,EAAI,CAAAa,SAAEJ,KACPK,EAAAA,EAAAA,KAACZ,EAAS,CAAAW,SAAEH,MAGxB,CCRO,IAAMQ,EAAWrB,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6HAQpBoB,EAAetB,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wDCLtB,SAASqB,IACpB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAA4BC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA8BL,EAAAA,EAAAA,YAAUM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAkB1B,OAhBAG,EAAAA,EAAAA,YAAU,WACNC,MAAM,sCAADlB,OAAuCK,EAAE,qEACzCc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAC,GACFE,QAAQC,IAAIH,GACPA,EAASI,SACVR,EAAWI,EAASK,gBAExBb,EAAUQ,EAASM,KACvB,IACCC,OAAM,SAAAC,GACHN,QAAQC,IAAIK,GACZZ,EAAWY,EACf,GACR,GAAG,CAACvB,KAGAT,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAAhC,SAAA,EACIC,EAAAA,EAAAA,KAACI,EAAQ,CAAAL,SACJc,GAAUA,EAAOmB,KAAI,SAAAtC,GAAA,IAAGa,EAAEb,EAAFa,GAAIZ,EAAID,EAAJC,KAAMC,EAASF,EAATE,UAAWqC,EAAYvC,EAAZuC,aAAY,OACtDjC,EAAAA,EAAAA,KAACP,EAAS,CAENE,KAAMA,EACNC,UAAWA,EACXC,UAAWoC,GAHN1B,EAIP,MAGTU,IAAWjB,EAAAA,EAAAA,KAACK,EAAY,CAAAN,SAAC,qCAGtC,C","sources":["components/ActorCard/ActorCard.styled.jsx","components/ActorCard/ActorCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport noImage from '../../images/no-image.jpg';\n\nexport const Card = styled.li`\n    display: flex;\n    text-align: center;\n    margin: 15px;\n    flex-direction: column;\n    flex-basis: 200px;\n    border-radius: 10px;\n    overflow: hidden;\n    box-shadow: 0px 1px 6px 0px rgba(25,5,48,0.28);\n`;\n\nexport const Name = styled.p`\n    margin-top: 8px;\n    margin-bottom: 0px;\n    font-weight: 700;\n    color: #190530;\n`;\n\nexport const Character = styled.p`\n    margin-top: 8px;\n    margin-bottom: 8px;\n    font-weight: 500;\n    color: #968299;\n`;\n\nexport const Image = styled.img`\n    display: block;\n    min-width: 200px;\n    min-height: 300px;\n    background-image: url(${noImage});\n    background-size: cover;\n`;","import { Card, Name, Character, Image } from \"./ActorCard.styled\";\n\nexport default function ActorCard({ name, character, photoPath }) {\n    return (\n        <Card>\n            <Image src={`https://image.tmdb.org/t/p/w200${photoPath}`} alt=\"\" />\n            <Name>{name}</Name>\n            <Character>{character}</Character>\n        </Card>\n    );\n}","import styled from \"styled-components\";\n\nexport const CardList = styled.ul`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 15px; \n    list-style: none;\n`;\n\nexport const Notification = styled.h3`\n    text-align: center;\n    color: #190530;\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ActorCard from \"components/ActorCard\";\nimport { Notification, CardList } from \"./Cast.styled\";\n\nexport default function Cast() {\n    const { id } = useParams();\n    const [actors, setActors] = useState();\n    const [isError, setIsError] = useState();\n\n    useEffect(() => {\n        fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=b6e502cbaaa880d060a13b6a3192abd0&language=en-US`)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response);\n                if (!response.success) {\n                    setIsError(response.status_message);\n                }\n                setActors(response.cast);\n            })\n            .catch(err => {\n                console.log(err);\n                setIsError(err);\n            });\n    }, [id]);\n\n    return (\n        <>\n            <CardList>\n                {actors && actors.map(({ id, name, character, profile_path }) =>\n                    <ActorCard\n                        key={id}\n                        name={name}\n                        character={character}\n                        photoPath={profile_path}\n                    />\n                )}\n            </CardList>\n            {isError && <Notification>Sorry, something went wrong...</Notification>}\n        </>     \n    );\n}"],"names":["Card","styled","_templateObject","_taggedTemplateLiteral","Name","_templateObject2","Character","_templateObject3","Image","_templateObject4","noImage","ActorCard","_ref","name","character","photoPath","_jsxs","children","_jsx","src","concat","alt","CardList","Notification","Cast","id","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","isError","setIsError","useEffect","fetch","then","response","json","console","log","success","status_message","cast","catch","err","_Fragment","map","profile_path"],"sourceRoot":""}